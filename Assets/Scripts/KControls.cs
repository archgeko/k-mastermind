//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/KControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KControls"",
    ""maps"": [
        {
            ""name"": ""InGame"",
            ""id"": ""98fa310e-fa46-4dad-beec-51c807b795e9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""a5f56fa2-90b7-4680-88f7-1b086da99956"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextTarget"",
                    ""type"": ""Button"",
                    ""id"": ""ce6497a1-1f15-4fa7-9b45-1bab711d3bc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BasicShoot"",
                    ""type"": ""Button"",
                    ""id"": ""8931c6ed-bb68-4224-b126-2ff614af94c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetLock"",
                    ""type"": ""Button"",
                    ""id"": ""19d328a4-09a6-4c95-8bbc-c90ba86543ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0593cd47-d91f-4c15-8d20-65230e9e3dd6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6b32b5b-ed1e-4753-a865-c34bd0fa3743"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aec755a4-e045-4ac2-99c5-8212a9cc1b8a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80a8cd4a-5c75-4569-962c-2326b5fc7822"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGame
        m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
        m_InGame_Move = m_InGame.FindAction("Move", throwIfNotFound: true);
        m_InGame_NextTarget = m_InGame.FindAction("NextTarget", throwIfNotFound: true);
        m_InGame_BasicShoot = m_InGame.FindAction("BasicShoot", throwIfNotFound: true);
        m_InGame_SetLock = m_InGame.FindAction("SetLock", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGame
    private readonly InputActionMap m_InGame;
    private IInGameActions m_InGameActionsCallbackInterface;
    private readonly InputAction m_InGame_Move;
    private readonly InputAction m_InGame_NextTarget;
    private readonly InputAction m_InGame_BasicShoot;
    private readonly InputAction m_InGame_SetLock;
    public struct InGameActions
    {
        private @KControls m_Wrapper;
        public InGameActions(@KControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_InGame_Move;
        public InputAction @NextTarget => m_Wrapper.m_InGame_NextTarget;
        public InputAction @BasicShoot => m_Wrapper.m_InGame_BasicShoot;
        public InputAction @SetLock => m_Wrapper.m_InGame_SetLock;
        public InputActionMap Get() { return m_Wrapper.m_InGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
        public void SetCallbacks(IInGameActions instance)
        {
            if (m_Wrapper.m_InGameActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnMove;
                @NextTarget.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnNextTarget;
                @NextTarget.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnNextTarget;
                @NextTarget.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnNextTarget;
                @BasicShoot.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnBasicShoot;
                @BasicShoot.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnBasicShoot;
                @BasicShoot.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnBasicShoot;
                @SetLock.started -= m_Wrapper.m_InGameActionsCallbackInterface.OnSetLock;
                @SetLock.performed -= m_Wrapper.m_InGameActionsCallbackInterface.OnSetLock;
                @SetLock.canceled -= m_Wrapper.m_InGameActionsCallbackInterface.OnSetLock;
            }
            m_Wrapper.m_InGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @NextTarget.started += instance.OnNextTarget;
                @NextTarget.performed += instance.OnNextTarget;
                @NextTarget.canceled += instance.OnNextTarget;
                @BasicShoot.started += instance.OnBasicShoot;
                @BasicShoot.performed += instance.OnBasicShoot;
                @BasicShoot.canceled += instance.OnBasicShoot;
                @SetLock.started += instance.OnSetLock;
                @SetLock.performed += instance.OnSetLock;
                @SetLock.canceled += instance.OnSetLock;
            }
        }
    }
    public InGameActions @InGame => new InGameActions(this);
    public interface IInGameActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnNextTarget(InputAction.CallbackContext context);
        void OnBasicShoot(InputAction.CallbackContext context);
        void OnSetLock(InputAction.CallbackContext context);
    }
}
